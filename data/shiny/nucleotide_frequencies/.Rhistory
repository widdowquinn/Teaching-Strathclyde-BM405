subset(map_data("state"), region=="maine")
stats = map_data("state")
arrests = USArrests
names(arrests = tolower(names(arrests)))
arrests$region = tolower(ronames(USArrests))
stats = map_data("state")
arrests = USArrests
names(arrests = tolower(names(arrests)))
arrests$region = tolower(rownames(USArrests))
names(arrests) = tolower(names(arrests)))
arrests$region = tolower(rownames(USArrests))
names(arrests) = tolower(names(arrests))
arrests$region = tolower(rownames(USArrests))
arrests
USArrests
head(map_data("state"))
stats = map_data("state")
arrests = USArrests
names(arrests) = tolower(names(arrests))
arrests$region = tolower(rownames(USArrests))
choro = merge(states, arrests, by="region")
# Reorder rows so that the original polygon ordering is
# retained.
choro = choro[order(choro$order),]
grid.assign(qplot(long, lat, data=choro, group=group, fill=assault, geom="polygon") + labs("assault"),
qplot(long, lat, data=choro, group=group, fill=assault/murder, geom="polygon") + labs("assault/murder"),
ncol=2)
stats = map_data("state")
arrests = USArrests
names(arrests) = tolower(names(arrests))
arrests$region = tolower(rownames(USArrests))
choro = merge(states, arrests, by="region")
# Reorder rows so that the original polygon ordering is
# retained.
choro = choro[order(choro$order),]
grid.arrange(qplot(long, lat, data=choro, group=group, fill=assault, geom="polygon") + labs("assault"),
qplot(long, lat, data=choro, group=group, fill=assault/murder, geom="polygon") + labs("assault/murder"),
ncol=2)
choro = merge(states, arrests, by="region")
states = map_data("state")
arrests = USArrests
names(arrests) = tolower(names(arrests))
arrests$region = tolower(rownames(USArrests))
choro = merge(states, arrests, by="region")
# Reorder rows so that the original polygon ordering is
# retained.
choro = choro[order(choro$order),]
grid.arrange(qplot(long, lat, data=choro, group=group, fill=assault, geom="polygon") + labs("assault"),
qplot(long, lat, data=choro, group=group, fill=assault/murder, geom="polygon") + labs("assault/murder"),
ncol=2)
grid.arrange(qplot(long, lat, data=choro, group=group, fill=assault, geom="polygon") + labs(title="assault"),
qplot(long, lat, data=choro, group=group, fill=assault/murder, geom="polygon") + labs(title="assault/murder"),
ncol=2)
ia = map_data("county", "iowa")
mid_range = function(x) mean(range(x, na.rm=TRUE))  # function to find the midpoint of a range of values
centres = ddply(ia, .(subregion), colwise(mid_range, .(lat, long)))  # Centre point of each county
ggplot(ia, aes(long, lat)) + geom_polygon(aes(group=group), fill=NA, colour="grey60") + geom_text(aes(label=subregion), data=centres, size=2, angle=45)
d = subset(diamonds, carat<2.5 & rbinom(nrow(diamonds), 1, 0.2) == 1)
library(ggplot2)
d = subset(diamonds, carat<2.5 & rbinom(nrow(diamonds), 1, 0.2) == 1)
View(d)
d = subset(diamonds, carat<2.5 & rbinom(nrow(diamonds), 1, 0.2) == 1)
View(d)
d = subset(diamonds, carat<2.5 & rbinom(nrow(diamonds), 1, 0.2) == 1)
View(d)
d = subset(diamonds, carat<2.5 & rbinom(nrow(diamonds), 1, 0.2) == 1)
d$lcarat = log10(carat)
d$lprice = log10(price)
# Remove the linear trend with diamond carat. That means we fit the price
# to the carat, and take residuals
detrend = lm(lprice ~ lcarat, data=d)
d$lprice2 = resid(detrend)
# Choose a random subset of diamond data where carat < 2.5, and take logs
# of carat and price
d = subset(diamonds, carat<2.5 & rbinom(nrow(diamonds), 1, 0.2) == 1)
d$lcarat = log10(d$carat)
d$lprice = log10(d$price)
# Remove the linear trend with diamond carat. That means we fit the price
# to the carat, and take residuals
detrend = lm(lprice ~ lcarat, data=d)
d$lprice2 = resid(detrend)
plot(d$lprice, d$lprice2)
mod = lm(lprice2 ~ lcarat * color, data=d)
more
mod
library(effects)
install.packages("effects")
library(effects)
effectdf = function(...) {suppressWarnings(as.data.frame(effect(...)))}
color = effectdf("color", mod)
both1 = effectdf("lcarat:color", mode)
effectdf = function(...) {suppressWarnings(as.data.frame(effect(...)))}
effect("color", mod)
grid.arrange(lcarat, lprice, data=d, colour=color)
library(gridExtra)
d$lprice = log10(d$price)
grid.arrange(lcarat, lprice, data=d, colour=color)
d = subset(diamonds, carat<2.5 & rbinom(nrow(diamonds), 1, 0.2) == 1)
d$lcarat = log10(d$carat)
d$lprice = log10(d$price)
# Remove the linear trend wrt diamond carat. That means we fit the price
# to the carat, and take residuals to be the new price value (with the
# fitted effect of carat remove)
detrend = lm(lprice ~ lcarat, data=d)
d$lprice2 = resid(detrend)
grid.arrange(lcarat, lprice, data=d, colour=color)
grid.arrange(qplot(lcarat, lprice, data=d, colour=color))
grid.arrange(qplot(lcarat, lprice, data=d, colour=color),
qplot(lcarat, lprice2, data=d, colour=color),
ncol=2)
grid.arrange(qplot(lcarat, lprice, data=d, colour=color, title="raw"),
qplot(lcarat, lprice2, data=d, colour=color, title="detrended"),
ncol=2)
grid.arrange(qplot(lcarat, lprice, data=d, colour=color, main="raw"),
qplot(lcarat, lprice2, data=d, colour=color, main="detrended"),
ncol=2)
effect("lcarat:color", mod)
effectdf = function(...) {
suppressWarnings(as.data.frame(effect(...)))
}
color = effectdf("color", mod)
both1 = effectdf("lcarat:color", mode)
effectdf = function(...) {
suppressWarnings(as.data.frame(effect(...)))
}
color = effectdf("color", mod)
both1 = effectdf("lcarat:color", mod)
color = effectdf("color", mod)
both1 = effectdf("lcarat:color", mod)
carat = effectdf("carat", mod, default.levels=50)
both1 = effectdf("lcarat:color", mod.levels=3)
# Plot the effects
# Marginal effect of color
fplot <- ggplot(mapping = aes(y = fit, ymin = lower, ymax = upper)) +
ylim(range(both2$lower, both2$upper))
fplot %+% color + aes(x = color) + geom_point() + geom_errorbar()
fplot %+% both2 +
aes(x = color, colour = lcarat, group = interaction(color, lcarat)) +
geom_errorbar() + geom_line(aes(group=lcarat)) +
scale_colour_gradient()
fplot = ggplot(mapping = aes(y = fit, ymin = lower, ymax = upper)) +
ylim(range(both2$lower, both2$upper))
fplot %+% color + aes(x = color) + geom_point() + geom_errorbar()
fplot %+% both2 +
aes(x = color, colour = lcarat, group = interaction(color, lcarat)) +
geom_errorbar() + geom_line(aes(group=lcarat)) +
scale_colour_gradient()
fplot = ggplot(mapping = aes(y = fit, ymin = lower, ymax = upper)) +
ylim(range(both2$lower, both2$upper))
color = effectdf("color", mod)
both1 = effectdf("lcarat:color", mod)
carat = effectdf("carat", mod, default.levels=50)
both2 = effectdf("lcarat:color", mod.levels=3)
# Plot the effects
# Marginal effect of color
fplot = ggplot(mapping = aes(y = fit, ymin = lower, ymax = upper)) +
ylim(range(both2$lower, both2$upper))
fplot %+% color + aes(x = color) + geom_point() + geom_errorbar()
fplot %+% both2 +
aes(x = color, colour = lcarat, group = interaction(color, lcarat)) +
geom_errorbar() + geom_line(aes(group=lcarat)) +
scale_colour_gradient()
fplot = ggplot(mapping = aes(y = fit, ymin = lower, ymax = upper)) +
ylim(range(both2$lower, both2$upper))
both2 = effectdf("lcarat:color", mod.levels=3)
color = effectdf("color", mod)
both1 = effectdf("lcarat:color", mod)
carat = effectdf("carat", mod, default.levels=50)
both2 = effectdf("lcarat:color", mod, default.levels=3)
color = effectdf("color", mod)
both1 = effectdf("lcarat:color", mod)
carat = effectdf("lcarat", mod, default.levels=50)
both2 = effectdf("lcarat:color", mod, default.levels=3)
fplot = ggplot(mapping = aes(y = fit, ymin = lower, ymax = upper)) +
ylim(range(both2$lower, both2$upper))
fplot %+% color + aes(x = color) + geom_point() + geom_errorbar()
fplot %+% both2 +
aes(x = color, colour = lcarat, group = interaction(color, lcarat)) +
geom_errorbar() + geom_line(aes(group=lcarat)) +
scale_colour_gradient()
color
carat
both1
grid.arrange(fplot %+% color + aes(x=color) + geom_point() + geom_errorbar() + labs(title="marginal effect of color"),
fplot %+% both2 +
aes(x = color, colour = lcarat, group = interaction(color, lcarat)) +
geom_errorbar() + geom_line(aes(group=lcarat)) +
scale_colour_gradient() +
labs(title="conditional effect of color, by carat"),
ncol=2)
ends <- subset(both1, lcarat == max(lcarat))
grid.arrange(fplot %+% carat + aes(x=lcarat) + geom_smooth(stat="identity"),
fplot %+% both1 + aes(x=lcarat, colour=color) +
geom_smooth(stat="identity") +
scale_colour_hue() + opts(legend.position="none") +
geom_text(aes(label=color, x = lcarat + 0.02), ends),
ncol=2)
ends <- subset(both1, lcarat == max(lcarat))
grid.arrange(fplot %+% carat + aes(x=lcarat) + geom_smooth(stat="identity") +
labs(title="marginal effect of carat"),
fplot %+% both1 + aes(x=lcarat, colour=color) +
geom_smooth(stat="identity") +
scale_colour_hue() + theme(legend.position="none") +
geom_text(aes(label=color, x = lcarat + 0.02), ends) +
labs(title="marginal effect of carat, by color"),
ncol=2)
View(ends)
m <- ggplot(movies, aes(year, rating))   # continuous x
m2 <- ggplot(movies, aes(round(rating), log10(votes))) # discrete x
grid.arrange(m + stat_summary(fun.y="median", geom="line"),
m + stat_summary(fun.data="median_hilow", geom="smooth"),
m + stat_summary(fun.y="mean", geom="line"),
m + stat_summary(fun.data="mean_cl_boot", geom="smooth"),
m2 + stat_summary(fun.y="mean", geom="point"),
m2 + stat_summary(fun.data="mean_cl_normal", geom="errorbar"),
m2 + stat_summary(fun.data="median_hilow", geom="pointrange"),
m2 + stat_summary(fun.data="median_hilow", geom="crossbar"),
ncol=4)
install.packages("Hmisc")
# Use the movies dataset
m <- ggplot(movies, aes(year, rating))   # continuous x
m2 <- ggplot(movies, aes(round(rating), log10(votes))) # discrete x
grid.arrange(m + stat_summary(fun.y="median", geom="line"),
m + stat_summary(fun.data="median_hilow", geom="smooth"),
m + stat_summary(fun.y="mean", geom="line"),
m + stat_summary(fun.data="mean_cl_boot", geom="smooth"),
m2 + stat_summary(fun.y="mean", geom="point"),
m2 + stat_summary(fun.data="mean_cl_normal", geom="errorbar"),
m2 + stat_summary(fun.data="median_hilow", geom="pointrange"),
m2 + stat_summary(fun.data="median_hilow", geom="crossbar"),
ncol=4)
m <- ggplot(movies, aes(year, rating))   # continuous x
m2 <- ggplot(movies, aes(round(rating), log10(votes))) # discrete x
grid.arrange(m + stat_summary(fun.y="median", geom="line"),
m + stat_summary(fun.data="median_hilow", geom="smooth"),
m + stat_summary(fun.y="mean", geom="line"),
m + stat_summary(fun.data="mean_cl_boot", geom="smooth"),
m2 + stat_summary(fun.y="mean", geom="point"),
m2 + stat_summary(fun.data="mean_cl_normal", geom="errorbar"),
m2 + stat_summary(fun.data="median_hilow", geom="pointrange"),
m2 + stat_summary(fun.data="median_hilow", geom="crossbar"),
ncol=4)
m2 + stat_summary(fun.data="mean_cl_boot", geom="crossbar")
m2 + stat_summary(fun.data="mean_cl_boot", geom="line")
midm = function(x) mean(x, trim=0.5)
m2 + stat_summary(aes(colour="trimmed"), fun.y=midm, geom="point") +
stat_summary(aes(colour="raw"), fun.y=mean, geom="point") +
scale_colour_hue("Mean")
iqr = function(x, ...) {
qs = quantile(as.numeric(x), c(0.25, 0.75), na.rm=T)
names(qs) = c("ymin", "ymax")
qs
}
m + stat_summary(fun.data="iqr", geom="ribbon")
unemp = qplot(date, unemploy, data=exonomics, geom="line",
xlab="", ylab="No. unemployed (1000s)")
unemp = qplot(date, unemploy, data=economics, geom="line",
xlab="", ylab="No. unemployed (1000s)")
(unemp = qplot(date, unemploy, data=economics, geom="line",
xlab="", ylab="No. unemployed (1000s)"))
# Place dividers according to new presidents
presidential = presidential[-(1:3),]
yrng = range(economics$unemploy)
xrng = range(economics$date)
unemp + geom_vline(aes(xintercept=start), data=presidential)
yrng = range(economics$unemploy)
xrng = range(economics$date)
unemp
start
unemp + geom_vline(aes(xintercept=start), data=presidential)
xrng
yrng
presidential
(unemp = qplot(date, unemploy, data=economics, geom="line",
xlab="", ylab="No. unemployed (1000s)"))
# Place dividers according to new presidents
presidential = presidential[-(1:3),]
yrng = range(economics$unemploy)
xrng = range(economics$date)
unemp + geom_vline(aes(xintercept=start), data=presidential)
unemp
unemp + geom_vline(aes(xintercept=5))
unemp + geom_vline(aes(xintercept="1969-01-20"))
head(economics)
unemp = qplot(date, unemploy, data=economics, geom="line",
xlab="", ylab="No. unemployed (1000s)")
unemp + geom_vline(aes(xintercept="1969-01-20"))
unemp = qplot(as.Date(date), unemploy, data=economics, geom="line",
xlab="", ylab="No. unemployed (1000s)")
unemp + geom_vline(aes(xintercept="1969-01-20"))
e = economics
e$date = as.Date(e$date, "%Y-$m-%d")
unemp = qplot(date, unemploy, data=e, geom="line",
xlab="", ylab="No. unemployed (1000s)")
unemp + geom_vline(aes(xintercept="1969-01-20"))
unemp + geom_vline(aes(xintercept=as.Date("1969-01-20"))
)
as.Date("1969-01-20")
unemp = qplot(date, unemploy, data=economics, geom="line",
xlab="", ylab="No. unemployed (1000s)")
unemp
unemp = qplot(date, unemploy, data=economics, geom="line",
xlab="", ylab="No. unemployed (1000s)") + scale_x_date()
unemp
unemp + geom_vline(aes(xintercept=start), data=presidential)
(unemp <- qplot(date, unemploy, data=economics, geom="line",
xlab = "", ylab = "No. unemployed (1000s)"))
presidential <- presidential[-(1:3), ]
yrng <- range(economics$unemploy)
xrng <- range(economics$date)
unemp + geom_vline(aes(xintercept = start), data = presidential)
unemp + geom_vline(aes(xintercept=as.numeric(start), data=presidential)
)
unemp = qplot(date, unemploy, data=economics, geom="line",
xlab="", ylab="No. unemployed (1000s)")
unemp + geom_vline(aes(xintercept=as.numeric(start), data=presidential))
unemp + geom_vline(aes(xintercept=as.numeric(start)), data=presidential)
(unemp = qplot(date, unemploy, data=economics, geom="line",
xlab="", ylab="No. unemployed (1000s)"))
# Place vertical lines according to new president start dates
presidential = presidential[-(1:3),]
yrng = range(economics$unemploy)
xrng = range(economics$date)
unemp + geom_vline(aes(xintercept=as.numeric(start)), data=presidential)
as.numeric(presidential$start)
presidential$start
presidential
library(ggplot2)
presidential
??presidential
reload(ggplot2)
library(devtools)
detach(ggplot2)
detach("package:ggplot2", unload=T)
library(ggplot2)
presidential
detach(presidential)
detach("presidential")
rm(presidential)
detach("package:ggplot2", unload=T)
library(ggplot2)
presidential
(unemp = qplot(date, unemploy, data=economics, geom="line",
xlab="", ylab="No. unemployed (1000s)"))
# Place vertical lines according to new president start dates
presidential = presidential[-(1:3),]
yrng = range(economics$unemploy)
xrng = range(economics$date)
unemp + geom_vline(aes(xintercept=as.numeric(start)), data=presidential)
unemp + geom_rect(aes(NULL, NULL, xmin=start, xmax=end, fill=party),
ymin=yrng[1], ymax=yrng[2], data=presidential) +
scale_fill_manual(values=alpha(c("blue", "red"), 0.2))
unemp + geom_rect(aes(NULL, NULL, xmin=start, xmax=end, fill=party),
ymin=yrng[1], ymax=yrng[2], data=presidential) +
scale_fill_manual(values=alpha(c("blue", "red"), 0.2))
library(scales) # needed for alpha()
unemp + geom_rect(aes(NULL, NULL, xmin=start, xmax=end, fill=party),
ymin=yrng[1], ymax=yrng[2], data=presidential) +
scale_fill_manual(values=alpha(c("blue", "red"), 0.2))
last_plot() + geom_text(aes(x=start, y=rng[1], label=name),
data=presidential, size=3, hjust=0,
vjust=0)
last_plot() + geom_text(aes(x=start, y=yrng[1], label=name),
data=presidential, size=3, hjust=0,
vjust=0)
last_plot() + geom_text(aes(x=start, y=yrng[1], label=name),
data=presidential, size=3, hjust=0,
vjust=0)
unemp + geom_rect(aes(NULL, NULL, xmin=start, xmax=end, fill=party),
ymin=yrng[1], ymax=yrng[2], data=presidential) +
scale_fill_manual(values=alpha(c("blue", "red"), 0.2))
last_plot() + geom_text(aes(x=start, y=yrng[1], label=name),
data=presidential, size=3, hjust=0,
vjust=0)
caption = paste(strwrap("Unemployment rates in the US have varied a lot over the years", 40), collapse="\n")
unemp + geom_text(aes(x, y, label=caption), data=data.frame(x=xrng[2], y=yrng[2]),
hjust=1, vjust=1, size=4)
highest = subset(exonomics, unemploy==max(unemploy))
unemp + geom_point(data=highest, size=3, colour=alpha("red", 0.5))
highest = subset(economics, unemploy==max(unemploy))
unemp + geom_point(data=highest, size=3, colour=alpha("red", 0.5))
grid.arrange(qplot(percwhite, percbelowpoverty, data=midwest),
qplot(percwhite, percbelowpoverty, data=midwest, size=poptotal/1e6) +
scale_area("Population\n(millions)", breaks=c(0.5, 1, 2, 4)),
qplot(percwhite, percbelowpoverty, data=midwest, size=area) + scale_area(),
ncol=3)
grid.arrange(qplot(percwhite, percbelowpoverty, data=midwest),
qplot(percwhite, percbelowpoverty, data=midwest, size=poptotal/1e6) +
scale_size_area("Population\n(millions)", breaks=c(0.5, 1, 2, 4)),
qplot(percwhite, percbelowpoverty, data=midwest, size=area) + scale_size_area(),
ncol=3)
lm_smooth = geom_smooth(method=lm, size=1)
grid.arrange(qplot(percwhite, percbelowpoverty, data=midwest) + lm_smooth,
qplot(percwhite, percbelowpoverty, data=midwest, weight=popdensity,
size=popdensity) + lm_smooth,
ncol=2)
grid.arrange(qplot(percbelowpoverty, data=midwest, binwidth=1),
qplot(percbelowpoverty, data=midwest, binwidth=1, weight=poptotal) + ylab("population"),
ncol=2)
clear()
library(gridExtra)
p = qplot(sleep_total, sleep_cycle, data=msleep, colour=vore)
grid.arrange(p,
p + scale_colour_hue(),
p + scale_colour_hue("What does\nit eat?",
breaks=c("herbi", "carni", "omni", NA),
labels=c("plants", "meat", "both", "don't know")),
p + scale_colour_brewer(pal="Set1"),
ncol=2)
library(ggplot2)
p = qplot(sleep_total, sleep_cycle, data=msleep, colour=vore)
grid.arrange(p,
p + scale_colour_hue(),
p + scale_colour_hue("What does\nit eat?",
breaks=c("herbi", "carni", "omni", NA),
labels=c("plants", "meat", "both", "don't know")),
p + scale_colour_brewer(pal="Set1"),
ncol=2)
p = qplot(sleep_total, sleep_cycle, data=msleep, colour=vore)
grid.arrange(p,
p + scale_colour_hue(),
p + scale_colour_hue("What does\nit eat?",
breaks=c("herbi", "carni", "omni", NA),
labels=c("plants", "meat", "both", "don't know")),
p + scale_colour_brewer(pal="Set1"),
ncol=2)
p = qplot(sleep_total, sleep_cycle, data=msleep, colour=vore)
p
p + scale_colour_hue()
p + scale_colour_hue("What does\nit eat?",
breaks=c("herbi", "carni", "omni", NA),
labels=c("plants", "meat", "both", "don't know"))
p + scale_colour_brewer(pal="Set1")
p + scale_colour_brewer(),
p + scale_colour_brewer()
p + scale_colour_brewer(palette="Set1")
p = qplot(cty, hwy, data=mpg, colour=displ)
grid.arrange(p,
ncol=3)
p = qplot(cty, hwy, data=mpg, colour=levels(displ)
grid.arrange(p,
ncol=3)
p = qplot(cty, hwy, data=mpg, colour=(displ))
grid.arrange(p,
ncol=3)
p = qplot(cty, hwy, data=mpg, colour=levels(displ))
grid.arrange(p,
ncol=3)
p = qplot(cty, hwy, data=mpg, colour=factor(displ))
grid.arrange(p,
ncol=3)
p = qplot(cty, hwy, data=mpg, colour=displ)
grid.arrange(p,
p + scale_x_continuous("City mpg"),
p + xlab("City mpg"),
p + ylab("Highway mpg"),
p + labs(x = "City mpg", y = "Highway", colour = "Displacement"),
p + xlab(expression(frac(miles, gallon))),
ncol=3)
p = qplot(cyl, wt, data=mtcars)
p
p1 = qplot(cyl, wt, data=mtcars)
p2 = qplot(wt, cyl, data=mtcars, colour=cyl)
grid.arrange(p1,
p1 + scale_x_continuous(breaks=c(5,5, 6.5)),
p1 + scale_x_continuous(limits=c(5,5, 6.5)),
p2,
p1 + scale_colour_gradient(breaks=c(5,5, 6.5)),
p1 + scale_colour_gradient(limits=c(5,5, 6.5)),
ncol=3)
p1 = qplot(cyl, wt, data=mtcars)
p2 = qplot(wt, cyl, data=mtcars, colour=cyl)
grid.arrange(p1,
p1 + scale_x_continuous(breaks=c(5,5, 6.5)),
p1 + scale_x_continuous(limits=c(5,5, 6.5)),
p2,
p2 + scale_colour_gradient(breaks=c(5,5, 6.5)),
p2 + scale_colour_gradient(limits=c(5,5, 6.5)),
ncol=3)
p1 = qplot(cyl, wt, data=mtcars)
p2 = qplot(wt, cyl, data=mtcars, colour=cyl)
p1
p2
p1 + scale_x_continuous(breaks=c(5,5, 6.5))
p1 + scale_x_continuous(limits=c(5,5, 6.5))
grid.arrange(p1,
p1 + scale_x_continuous(breaks=c(5.5, 6.5)),
p1 + scale_x_continuous(limits=c(5.5, 6.5)),
p2,
p2 + scale_colour_gradient(breaks=c(5.5, 6.5)),
p2 + scale_colour_gradient(limits=c(5.5, 6.5)),
ncol=3)
install.packages('/Library/gurobi563/mac64/R/gurobi_5.6-3.tgz')
install.packages("/Library/gurobi563/mac64/R/gurobi_5.6-3.tgz", repos = NULL)
library('gurobi')
source('~/.active-rstudio-document')
result
source('~/.active-rstudio-document')
intersect(tsvm, homology)
intersect(homology, kmmsvm)
source('~/.active-rstudio-document')
intersect(homology, kmmsvm)
intersect(homology, kmmsvm)
intersect(homology, kmmsvm)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
25498*4500
source('~/.active-rstudio-document')
intersect(homology, kmmsvm)
setwd("~/Development/GitHub/Teaching-2014-11-21-Strathclyde/data/shiny")
library(shiny)
runApp("nucleotide_frequencies")
